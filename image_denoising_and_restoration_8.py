# -*- coding: utf-8 -*-
"""Image denoising and restoration_8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Mlna72OVGEGxRf3AekkDykcbuNrZ65w
"""

import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import os

train_data_dir = r'C:\Users\Anjali\Downloads\Agricultural-crops'

datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2
)


train_generator = datagen.flow_from_directory(
    train_data_dir,
    target_size=(128, 128),
    color_mode='grayscale',
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

validation_generator = datagen.flow_from_directory(
    train_data_dir,
    target_size=(128, 128),
    color_mode='grayscale',
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

x_train = np.concatenate([next(train_generator)[0] for _ in range(train_generator.samples // train_generator.batch_size)])
x_test = np.concatenate([next(validation_generator)[0] for _ in range(validation_generator.samples // validation_generator.batch_size)])


noise_factor = 0.5
x_train_noisy = x_train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_train.shape)
x_test_noisy = x_test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_test.shape)


x_train_noisy = np.clip(x_train_noisy, 0., 1.)
x_test_noisy = np.clip(x_test_noisy, 0., 1.)


x_train_noisy = np.reshape(x_train_noisy, (len(x_train_noisy), 128, 128, 1))
x_test_noisy = np.reshape(x_test_noisy, (len(x_test_noisy), 128, 128, 1))
x_train = np.reshape(x_train, (len(x_train), 128, 128, 1))
x_test = np.reshape(x_test, (len(x_test), 128, 128, 1))

def build_autoencoder():
    model = keras.Sequential()


    model.add(layers.Input(shape=(28, 28, 1)))
    model.add(layers.Conv2D(16, (3, 3), activation='relu', padding='same'))
    model.add(layers.MaxPooling2D((2, 2), padding='same'))

    model.add(layers.Conv2D(8, (3, 3), activation='relu', padding='same'))
    model.add(layers.MaxPooling2D((2, 2), padding='same'))


    model.add(layers.Conv2D(8, (3, 3), activation='relu', padding='same'))
    model.add(layers.UpSampling2D((2, 2)))

    model.add(layers.Conv2D(16, (3, 3), activation='relu', padding='same'))
    model.add(layers.UpSampling2D((2, 2)))

    model.add(layers.Conv2D(1, (3, 3), activation='sigmoid', padding='same'))

    return model

autoencoder = build_autoencoder()
autoencoder.compile(optimizer='adam', loss='binary_crossentropy')


autoencoder.fit(x_train_noisy, x_train,
                epochs=50,
                batch_size=128,
                validation_data=(x_test_noisy, x_test))

denoised_images = autoencoder.predict(x_test_noisy)

n = 10
plt.figure(figsize=(20, 6))
for i in range(n):

    ax = plt.subplot(3, n, i + 1)
    plt.imshow(x_test[i].reshape(128,128), cmap='gray')
    plt.title("Original")
    plt.axis("off")


    ax = plt.subplot(3, n, i + 1 + n)
    plt.imshow(x_test_noisy[i].reshape(128, 128), cmap='gray')
    plt.title("Noisy")
    plt.axis("off")


    ax = plt.subplot(3, n, i + 1 + 2*n)
    plt.imshow(denoised_images[i].reshape(128, 128), cmap='gray')
    plt.title("Denoised")
    plt.axis("off")

plt.show()

