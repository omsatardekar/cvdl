# -*- coding: utf-8 -*-
"""Image_filtering_technique 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PFyMeK9Jeo5sFmKA_mmixmxqFHpAaZ4t
"""

import cv2
import numpy as np
import os
import matplotlib.pyplot as plt

class ImageFilter:
    def __init__(self, dataset_path):
        self.dataset_path = dataset_path
        self.images = self.load_dataset()

    def load_dataset(self):
        # Load all images in the dataset path
        images = []
        for file_name in os.listdir(self.dataset_path):
            img_path = os.path.join(self.dataset_path, file_name)
            img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
            if img is not None:
                images.append((file_name, img))
            else:
                print(f"Error loading image: {file_name}")
        return images

    def display_image(self, image, title):
        plt.figure(figsize=(8, 8))
        plt.imshow(image, cmap='gray')
        plt.title(title)
        plt.axis('off')
        plt.show()

    def Sobel_Filter(self, image):
        sobelx = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
        sobely = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)
        sobel = np.sqrt(sobelx**2 + sobely**2)
        return sobel

    def Prewitt_Filter(self, image):
        kernelx = np.array([[1, 0, -1], [1, 0, -1], [1, 0, -1]])
        kernely = np.array([[1, 1, 1], [0, 0, 0], [-1, -1, -1]])
        prewittx = cv2.filter2D(image, -1, kernelx)
        prewitty = cv2.filter2D(image, -1, kernely)
        prewitt = np.sqrt(prewittx**2 + prewitty**2)
        return prewitt

    def Roberts_Filter(self, image):
        kernelx = np.array([[1, 0], [0, -1]])
        kernely = np.array([[0, 1], [-1, 0]])
        robertsx = cv2.filter2D(image, -1, kernelx)
        robertsy = cv2.filter2D(image, -1, kernely)
        roberts = np.sqrt(robertsx**2 + robertsy**2)
        return roberts

    def Median_Filter(self, image):
        return cv2.medianBlur(image, 5)

    def Gaussian_Filter(self, image):
        return cv2.GaussianBlur(image, (5, 5), 0)

    def Averaging_Filter(self, image):
        return cv2.blur(image, (5, 5))

    def Laplacian_Filter(self, image):
        return cv2.Laplacian(image, cv2.CV_64F)

    def Canny_Filter(self, image):
        return cv2.Canny(image, 100, 200)

    def apply_filter_to_dataset(self, choice, save_output=False):
        filters = {
            1: ('Sobel Filter', self.Sobel_Filter),
            2: ('Prewitt Filter', self.Prewitt_Filter),
            3: ('Roberts Filter', self.Roberts_Filter),
            4: ('Median Filter', self.Median_Filter),
            5: ('Gaussian Filter', self.Gaussian_Filter),
            6: ('Averaging Filter', self.Averaging_Filter),
            7: ('Laplacian Filter', self.Laplacian_Filter),
            8: ('Canny Edge Detection', self.Canny_Filter)
        }
        if choice in filters:
            filter_name, filter_func = filters[choice]
            output_dir = os.path.join(self.dataset_path, f"{filter_name}_output")
            if save_output and not os.path.exists(output_dir):
                os.makedirs(output_dir)

            for file_name, img in self.images:
                result = filter_func(img)
                if save_output:
                    output_path = os.path.join(output_dir, f"filtered_{file_name}")
                    cv2.imwrite(output_path, result)
                else:
                    self.display_image(result, f"{filter_name} - {file_name}")
            print(f"Filter applied to all images. Results {'saved to ' + output_dir if save_output else 'displayed.'}")
        else:
            print("Invalid choice. Please select a number between 1 and 8.")


dataset_path = r'C:\Users\Anjali\Downloads\edge_detection_images'

image_filter = ImageFilter(dataset_path)

if image_filter.images:
    while True:
        print("\nChoose a filter:")
        print("1. Sobel Filter")
        print("2. Prewitt Filter")
        print("3. Roberts Filter")
        print("4. Median Filter")
        print("5. Gaussian Filter")
        print("6. Averaging Filter")
        print("7. Laplacian Filter")
        print("8. Canny Edge Detection")
        print("9. Exit")

        try:
            choice = int(input("Enter your choice: "))
            if choice == 9:
                print("Exiting the program. Goodbye!")
                break
            elif choice in [1, 2, 3, 4, 5, 6, 7, 8]:
                save = input("Do you want to save the results? (yes/no): ").strip().lower() == 'yes'
                image_filter.apply_filter_to_dataset(choice, save_output=save)
            else:
                print("Invalid choice. Please select a number between 1 and 9.")
        except ValueError:
            print("Invalid input. Please enter a number.")
else:
    print("No images found in the dataset.")

